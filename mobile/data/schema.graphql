# A cryptocurencie coin
type Crypto implements Node {
  # The ID of an object
  id: ID!
  name: String!
  symbol: String!
  rank: String!
  cryptoId: String
  priceUsd: String
  priceBtc: String
  volumeUsd24h: String
  marketCapUsd: String
  availableSuply: String
  totalSuply: String
  percentChange1h: String
  percentChange24h: String
  percentChange7d: String
  lastUpdated: String
}

# A connection to a list of items.
type CryptosConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CryptosEdge]
}

# An edge in a connection.
type CryptosEdge {
  # The item at the end of the edge
  node: Crypto

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# KeepMyFolio Api
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  nodes(ids: [ID!]): [Node]
  viewer: Viewer
}

type Viewer {
  cryptos(limit: Int, after: String, first: Int, before: String, last: Int): CryptosConnection
}
