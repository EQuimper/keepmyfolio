# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}


# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Crypto implements Node {
  id: ID!
  name: String!
  symbol: String!
  rank: String!
  cryptoId: String
  priceUsd: String
  priceBtc: String
  volumeUsd24h: String
  marketCapUsd: String
  availableSuply: String
  totalSuply: String
  percentChange1h: String
  percentChange24h: String
  percentChange7d: String
  lastUpdated: String
}

type CryptosEdge {
  node: Crypto
  cursor: String!
}

type CryptosConnection {
  pageInfo: PageInfo!
  edges: [CryptosEdge]
}

type Query {
  node(
    id: ID!
  ): Node

  nodes(
    ids: [ID!]
  ): [Node]

  Cryptos(
    after: String
    first: Int
    before: String
    last: Int
  ): CryptosConnection
}
